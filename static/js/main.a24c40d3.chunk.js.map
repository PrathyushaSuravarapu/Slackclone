{"version":3,"sources":["server/firebase.js","components/SideBar/UserInfo/UserInfo.js","store/actioncreator.js","store/actiontypes.js","components/SideBar/Notification/Notification.js","components/SideBar/Channels/Channels.js","components/SideBar/PrivateChat/PrivateChat.js","components/SideBar/FavouriteChannels/FavouriteChannels.js","components/SideBar/SideBar.js","components/Messages/MessageHeader/MessageHeader.js","components/Messages/MessageContent/MessageContent.js","components/Messages/ImageUpload/ImageUpload.js","components/Messages/MessageInput/MessageInput.js","components/Messages/Messages.js","App.js","components/Auth/Login/Login.js","components/Auth/Register/Register.js","store/reducer.js","components/AppLoader/AppLoader.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","connect","state","user","currentUser","props","signOut","auth","then","console","log","localStorage","removeItem","Grid","Column","Row","className","Header","inverted","as","Icon","name","Content","Dropdown","trigger","Image","src","photoURL","avatar","displayName","options","key","text","onClick","setChannel","channel","type","payload","currentChannel","Notification","messagesRef","database","ref","usersRef","useState","channelsVisitedState","setChannelsVisitedState","messagesTimeStampState","setMessagesTimeStampState","useEffect","child","uid","on","snap","val","messages","channelsId","Object","keys","messagesTimeStamp","forEach","channelId","reduce","agg","item","push","timestamp","id","lastVisited","channelMessagesTimeStamp","notificationCount","filter","length","Label","color","calculateNotificationCount","notificationChannelId","dispatch","selectChannel","modalOpenState","setModalOpenState","description","channelAddState","setChannelAddState","isLoadingState","setLoadingState","channelsState","setChannelsState","channelsRef","currentState","updatedState","off","closeModal","setLastVisited","set","ServerValue","TIMESTAMP","onDisconnect","onSubmit","created_by","update","catch","err","handleInput","e","target","value","Menu","style","marginTop","Item","fontSize","map","active","isFavourite","displayChannels","Modal","open","onClose","Form","Segment","stacked","Input","onChange","placeholder","Actions","Button","loading","usersState","setUsersState","connectedUsersState","setConnectedUsersState","connectedRef","statusRef","isPrivateChat","userStatusRef","remove","index","indexOf","splice","selectUser","userTemp","generateChannelId","userId","displayUsers","favouriteChannels","favouriteChannel","SideBar","vertical","fixed","borderless","size","MessageHeader","clearing","floated","fluid","channelName","starChange","starred","Subheader","uniqueUsers","icon","searchTermChange","TimeAgo","locale","en","timeAgo","MessageContent","Comment","Avatar","message","ownMessage","Author","Metadata","format","image","onLoad","imageLoaded","Text","content","ImageUpload","fileState","setFileState","acceptedTypes","basic","file","files","label","includes","mime","lookup","uploadImage","messageRef","storageRef","storage","messageState","setMessageState","fileDialogState","setFileDialog","sendMessage","downloadUrl","createMessageInfo","labelPosition","contentType","filePath","uuidv4","put","data","getDownloadURL","url","setfavouriteChannel","removefavouriteChannel","messagesState","setMessagesState","searchTermState","setSearchTermState","divRef","useRef","scrollIntoView","behavior","filterMessageBySearchTerm","regex","RegExp","acc","match","isStarred","favouriteRef","Group","messagesToDisplay","displayMessages","currentEl","App","columns","width","Login","email","password","userState","setuserState","isLoading","setIsLoading","errorState","seterrorState","event","currentuser","isFormEmpty","verticalAlign","textAlign","maxWidth","error","concat","signInWithEmailAndPassword","serverError","iconPosition","disabled","Message","to","Register","userCollectionRef","userName","confirmpassword","isSuccess","setIsSuccess","checkPassword","updateuserDetails","createdUser","updateProfile","saveUserInDB","createUserWithEmailAndPassword","success","defaultUserState","defaultChannelState","defaultFavouriteChannelState","combinedReducers","combineReducers","action","AppLoader","Dimmer","Loader","store","createStore","IndexWithRouter","withRouter","setUser","onAuthStateChanged","history","location","pathname","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a24c40d3.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nimport \"firebase/auth\";\nimport \"firebase/storage\";\nimport \"firebase/database\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyB8I4YgVw3wpSWk8tmu9b5gab4S2D1ngvA\",\n  authDomain: \"slackclone-1f8c8.firebaseapp.com\",\n  databaseURL: \"https://slackclone-1f8c8-default-rtdb.firebaseio.com\",\n  projectId: \"slackclone-1f8c8\",\n  storageBucket: \"slackclone-1f8c8.appspot.com\",\n  messagingSenderId: \"168255872422\",\n  appId: \"1:168255872422:web:20112e8310075fb9d60367\",\n  measurementId: \"G-Z4JXJMYE84\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;\n","import React from \"react\";\nimport { Grid, Header, Icon, Image, Dropdown } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\n\nimport \"./UserInfo.css\";\n\nconst UserInfo = (props) => {\n  const getDropDownOptions = () => {\n    return [\n      {\n        key: \"signout\",\n        text: <span onClick={signOut}>Sign Out</span>,\n      },\n    ];\n  };\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"user signed out\"));\n    localStorage.removeItem(\"props.user.uid\");\n  };\n\n  if (props.user) {\n    return (\n      <Grid>\n        <Grid.Column>\n          <Grid.Row className=\"userinfo_grid_row\">\n            <Header inverted as=\"h2\">\n              <Icon name=\"slack\" />\n              <Header.Content>Slack</Header.Content>\n            </Header>\n            <Header className=\"userinfo_displayname\" inverted as=\"h4\">\n              <Dropdown\n                trigger={\n                  <span>\n                    <Image src={props.user.photoURL} avatar></Image>\n                    {props.user.displayName}\n                  </span>\n                }\n                options={getDropDownOptions()}\n              ></Dropdown>\n            </Header>\n          </Grid.Row>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps)(UserInfo);\n","import {\n  SET_USER,\n  SET_CHANNEL,\n  SET_FAVOURITECHANNEL,\n  REMOVE_FAVOURITECHANNEL,\n} from \"./actiontypes\";\n\nexport const setUser = (user) => {\n  return {\n    type: SET_USER,\n    payload: {\n      currentUser: user,\n    },\n  };\n};\n\nexport const setChannel = (channel) => {\n  return {\n    type: SET_CHANNEL,\n    payload: {\n      currentChannel: channel,\n    },\n  };\n};\n\nexport const setfavouriteChannel = (channel) => {\n  return {\n    type: SET_FAVOURITECHANNEL,\n    payload: {\n      favouriteChannel: channel,\n    },\n  };\n};\n\nexport const removefavouriteChannel = (channel) => {\n  return {\n    type: REMOVE_FAVOURITECHANNEL,\n    payload: {\n      favouriteChannel: channel,\n    },\n  };\n};\n","export const SET_USER = 'SET_USER'\n\nexport const SET_CHANNEL = 'SET_CHANNEL'\n\nexport const SET_FAVOURITECHANNEL = 'SET_FAVOURITECHANNEL'\n\nexport const REMOVE_FAVOURITECHANNEL = 'REMOVE_FAVOURITECHANNEL'","import React, { useState, useEffect } from \"react\";\r\nimport { Label } from \"semantic-ui-react\";\r\n\r\nimport firebase from \"../../../server/firebase\";\r\n\r\nexport const Notification = (props) => {\r\n  const messagesRef = firebase.database().ref(\"messages\");\r\n\r\n  const usersRef = firebase.database().ref(\"users\");\r\n\r\n  const [channelsVisitedState, setChannelsVisitedState] = useState({});\r\n\r\n  const [messagesTimeStampState, setMessagesTimeStampState] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (props.user) {\r\n      usersRef\r\n        .child(props.user.uid)\r\n        .child(\"lastVisited\")\r\n        .on(\"value\", (snap) => {\r\n          setChannelsVisitedState(snap.val());\r\n        });\r\n\r\n      messagesRef.on(\"value\", (snap) => {\r\n        let messages = snap.val();\r\n        console.log(messages);\r\n        let channelsId = Object.keys(messages);\r\n        let messagesTimeStamp = {};\r\n        channelsId.forEach((channelId) => {\r\n          let channelMessageKeys = Object.keys(messages[channelId]);\r\n          channelMessageKeys.reduce((agg, item) => {\r\n            messagesTimeStamp[channelId] = [\r\n              ...(messagesTimeStamp[channelId] || []),\r\n            ];\r\n            messagesTimeStamp[channelId].push(\r\n              messages[channelId][item].timestamp\r\n            );\r\n          });\r\n        });\r\n        setMessagesTimeStampState(messagesTimeStamp);\r\n      });\r\n    }\r\n  }, [props.user]);\r\n\r\n  const calculateNotificationCount = (channelId) => {\r\n    if (\r\n      channelsVisitedState &&\r\n      messagesTimeStampState &&\r\n      props.channel &&\r\n      props.channel.id !== channelId\r\n    ) {\r\n      let lastVisited = channelsVisitedState[channelId];\r\n\r\n      let channelMessagesTimeStamp = messagesTimeStampState[channelId];\r\n\r\n      if (channelMessagesTimeStamp) {\r\n        let notificationCount = channelMessagesTimeStamp.filter(\r\n          (timestamp) => !lastVisited || lastVisited < timestamp\r\n        ).length;\r\n        return notificationCount === 0 ? null : (\r\n          <Label color=\"red\">{notificationCount}</Label>\r\n        );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      {props.displayName}\r\n      {calculateNotificationCount(props.notificationChannelId)}{\" \"}\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../../server/firebase\";\r\nimport { setChannel } from \"../../../store/actioncreator\";\r\nimport { Notification } from \"../Notification/Notification\";\r\nimport \"./Channels.css\";\r\nimport { Menu, Icon, Modal, Button, Form, Segment } from \"semantic-ui-react\";\r\n\r\nconst Channels = (props) => {\r\n  const [modalOpenState, setModalOpenState] = useState(false);\r\n  const [channelAddState, setChannelAddState] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n  });\r\n  const [isLoadingState, setLoadingState] = useState(false);\r\n  const [channelsState, setChannelsState] = useState([]);\r\n\r\n  const channelsRef = firebase.database().ref(\"channels\");\r\n  const usersRef = firebase.database().ref(\"users\");\r\n\r\n  useEffect(() => {\r\n    channelsRef.on(\"child_added\", (snap) => {\r\n      setChannelsState((currentState) => {\r\n        let updatedState = [...currentState];\r\n        updatedState.push(snap.val());\r\n        return updatedState;\r\n      });\r\n    });\r\n    return () => channelsRef.off();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (channelsState.length > 0) {\r\n      props.selectChannel(channelsState[0]);\r\n    }\r\n  }, [!props.channel ? channelsState : null]);\r\n\r\n  const openModal = () => {\r\n    setModalOpenState(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpenState(false);\r\n  };\r\n\r\n  const checkIfFormValid = () => {\r\n    return (\r\n      channelAddState && channelAddState.name && channelAddState.description\r\n    );\r\n  };\r\n\r\n  const displayChannels = () => {\r\n    if (channelsState.length > 0) {\r\n      return channelsState.map((channel) => {\r\n        return (\r\n          <Menu.Item\r\n            key={channel.id}\r\n            name={channel.name}\r\n            onClick={() => selectChannel(channel)}\r\n            active={\r\n              props.channel &&\r\n              channel.id === props.channel.id &&\r\n              !props.channel.isFavourite\r\n            }\r\n          >\r\n            <Notification\r\n              user={props.user}\r\n              channel={props.channel}\r\n              notificationChannelId={channel.id}\r\n              displayName={\"# \" + channel.name}\r\n            />\r\n          </Menu.Item>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const selectChannel = (channel) => {\r\n    setLastVisited(props.user, props.channel);\r\n    setLastVisited(props.user, channel);\r\n    props.selectChannel(channel);\r\n  };\r\n\r\n  const setLastVisited = (user, channel) => {\r\n    const lastVisited = usersRef\r\n      .child(user.uid)\r\n      .child(\"lastVisited\")\r\n      .child(channel.id);\r\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\r\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (!checkIfFormValid()) {\r\n      return;\r\n    }\r\n\r\n    const key = channelsRef.push().key;\r\n\r\n    const channel = {\r\n      id: key,\r\n      name: channelAddState.name,\r\n      description: channelAddState.description,\r\n      created_by: {\r\n        name: props.user.displayName,\r\n        avatar: props.user.photoURL,\r\n      },\r\n    };\r\n\r\n    setLoadingState(true);\r\n    channelsRef\r\n      .child(key)\r\n      .update(channel)\r\n      .then(() => {\r\n        setChannelAddState({ name: \"\", description: \"\" });\r\n        setLoadingState(false);\r\n        closeModal();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    let target = e.target;\r\n    setChannelAddState((currentState) => {\r\n      let updatedState = { ...currentState };\r\n      updatedState[target.name] = target.value;\r\n      return updatedState;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <Menu.Menu style={{ marginTop: \"35px\" }}>\r\n        <Menu.Item style={{ fontSize: \"17px\" }}>\r\n          <span>\r\n            <Icon name=\"exchange\" /> Channels\r\n          </span>\r\n          ({channelsState.length})\r\n        </Menu.Item>\r\n        {displayChannels()}\r\n        <Menu.Item>\r\n          <span className=\"clickable\" onClick={openModal}>\r\n            <Icon name=\"add\" /> ADD\r\n          </span>\r\n        </Menu.Item>\r\n      </Menu.Menu>\r\n      <Modal open={modalOpenState} onClose={closeModal}>\r\n        <Modal.Header>Create Channel</Modal.Header>\r\n        <Modal.Content>\r\n          <Form onSubmit={onSubmit}>\r\n            <Segment stacked>\r\n              <Form.Input\r\n                name=\"name\"\r\n                value={channelAddState.name}\r\n                onChange={handleInput}\r\n                type=\"text\"\r\n                placeholder=\"Enter Channel Name\"\r\n              />\r\n              <Form.Input\r\n                name=\"description\"\r\n                value={channelAddState.description}\r\n                onChange={handleInput}\r\n                type=\"text\"\r\n                placeholder=\"Enter Channel Description\"\r\n              />\r\n            </Segment>\r\n          </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button color=\"green\" loading={isLoadingState} onClick={onSubmit}>\r\n            <Icon name=\"checkmark\" /> Save\r\n          </Button>\r\n          <Button color=\"red\" onClick={closeModal}>\r\n            <Icon name=\"remove\" /> Cancel\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user.currentUser,\r\n    channel: state.channel.currentChannel,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    selectChannel: (channel) => dispatch(setChannel(channel)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../../server/firebase\";\r\nimport { setChannel } from \"../../../store/actioncreator\";\r\nimport { Notification } from \"../Notification/Notification\";\r\nimport { Menu, Icon } from \"semantic-ui-react\";\r\n\r\nconst PrivateChat = (props) => {\r\n  const [usersState, setUsersState] = useState([]);\r\n\r\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\r\n\r\n  const usersRef = firebase.database().ref(\"users\");\r\n\r\n  const connectedRef = firebase.database().ref(\".info/connected\");\r\n\r\n  const statusRef = firebase.database().ref(\"status\");\r\n\r\n  useEffect(() => {\r\n    usersRef.on(\"child_added\", (snap) => {\r\n      setUsersState((currentState) => {\r\n        let updatedState = [...currentState];\r\n\r\n        let user = snap.val();\r\n        user.name = user.displayName;\r\n        user.id = snap.key;\r\n        user.isPrivateChat = true;\r\n        updatedState.push(user);\r\n\r\n        return updatedState;\r\n      });\r\n    });\r\n\r\n    connectedRef.on(\"value\", (snap) => {\r\n      if (props.user && snap.val()) {\r\n        const userStatusRef = statusRef.child(props.user.uid);\r\n        userStatusRef.set(true);\r\n        userStatusRef.onDisconnect().remove();\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      usersRef.off();\r\n      connectedRef.off();\r\n    };\r\n  }, [props.user]);\r\n\r\n  useEffect(() => {\r\n    statusRef.on(\"child_added\", (snap) => {\r\n      setConnectedUsersState((currentState) => {\r\n        let updatedState = [...currentState];\r\n        updatedState.push(snap.key);\r\n        return updatedState;\r\n      });\r\n    });\r\n\r\n    statusRef.on(\"child_removed\", (snap) => {\r\n      setConnectedUsersState((currentState) => {\r\n        let updatedState = [...currentState];\r\n\r\n        let index = updatedState.indexOf(snap.key);\r\n        updatedState.splice(index, 1);\r\n        return updatedState;\r\n      });\r\n    });\r\n\r\n    return () => statusRef.off();\r\n  }, [usersState]);\r\n\r\n  const displayUsers = () => {\r\n    if (usersState.length > 0) {\r\n      return usersState\r\n        .filter((user) => user.id !== props.user.uid)\r\n        .map((user) => {\r\n          return (\r\n            <Menu.Item\r\n              key={user.id}\r\n              name={user.name}\r\n              onClick={() => selectUser(user)}\r\n              active={\r\n                props.channel && generateChannelId(user.id) === props.channel.id\r\n              }\r\n            >\r\n              <Icon\r\n                name=\"circle\"\r\n                color={`${\r\n                  connectedUsersState.indexOf(user.id) !== -1 ? \"green\" : \"red\"\r\n                }`}\r\n              />\r\n              <Notification\r\n                user={props.user}\r\n                channel={props.channel}\r\n                notificationChannelId={generateChannelId(user.id)}\r\n                displayName={\"@ \" + user.name}\r\n              />\r\n            </Menu.Item>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const selectUser = (user) => {\r\n    let userTemp = { ...user };\r\n    userTemp.id = generateChannelId(user.id);\r\n    setLastVisited(props.user, props.channel);\r\n    setLastVisited(props.user, userTemp);\r\n    props.selectChannel(userTemp);\r\n  };\r\n\r\n  const setLastVisited = (user, channel) => {\r\n    const lastVisited = usersRef\r\n      .child(user.uid)\r\n      .child(\"lastVisited\")\r\n      .child(channel.id);\r\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\r\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\r\n  };\r\n\r\n  const generateChannelId = (userId) => {\r\n    if (props.user.uid < userId) {\r\n      return props.user.uid + userId;\r\n    } else {\r\n      return userId + props.user.uid;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Menu.Menu style={{ marginTop: \"35px\" }}>\r\n      <Menu.Item style={{ fontSize: \"17px\" }}>\r\n        <span>\r\n          <Icon name=\"mail\" /> Direct Messages\r\n        </span>\r\n        ({usersState.length - 1})\r\n      </Menu.Item>\r\n      {displayUsers()}\r\n    </Menu.Menu>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user.currentUser,\r\n    channel: state.channel.currentChannel,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    selectChannel: (channel) => dispatch(setChannel(channel)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setChannel } from \"../../../store/actioncreator\";\r\n\r\nimport { Menu, Icon } from \"semantic-ui-react\";\r\n\r\nconst FavouriteChannels = (props) => {\r\n  const displayChannels = () => {\r\n    if (Object.keys(props.favouriteChannels).length > 0) {\r\n      return Object.keys(props.favouriteChannels).map((channelId) => {\r\n        return (\r\n          <Menu.Item\r\n            key={channelId}\r\n            name={props.favouriteChannels[channelId]}\r\n            onClick={() =>\r\n              props.selectChannel({\r\n                id: channelId,\r\n                name: props.favouriteChannels[channelId],\r\n                isFavourite: true,\r\n              })\r\n            }\r\n            active={\r\n              props.channel &&\r\n              channelId === props.channel.id &&\r\n              props.channel.isFavourite\r\n            }\r\n          >\r\n            {\"# \" + props.favouriteChannels[channelId]}\r\n          </Menu.Item>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Menu.Menu>\r\n      <Menu.Item style={{ fontSize: \"17px\" }}>\r\n        <span>\r\n          <Icon name=\"star\" /> Starred\r\n        </span>\r\n        ({Object.keys(props.favouriteChannels).length})\r\n      </Menu.Item>\r\n      {displayChannels()}\r\n    </Menu.Menu>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    channel: state.channel.currentChannel,\r\n    favouriteChannels: state.favouriteChannel.favouriteChannel,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    selectChannel: (channel) => dispatch(setChannel(channel)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavouriteChannels);\r\n","import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport UserInfo from \"./UserInfo/UserInfo\";\nimport Channels from \"./Channels/Channels\";\nimport PrivateChat from \"./PrivateChat/PrivateChat\";\nimport FavouriteChannels from \"./FavouriteChannels/FavouriteChannels\";\nimport \"./SideBar.css\";\n\nexport const SideBar = () => {\n  return (\n    <Menu vertical fixed=\"left\" borderless size=\"large\" className=\"side_bar\">\n      <UserInfo />\n      <FavouriteChannels />\n      <Channels />\n      <PrivateChat />\n    </Menu>\n  );\n};\n","import React from \"react\";\r\nimport { Segment, Header, Input, Icon } from \"semantic-ui-react\";\r\n\r\nconst MessageHeader = (props) => {\r\n  return (\r\n    <Segment clearing>\r\n      <Header floated=\"left\" fluid=\"true\" as=\"h2\">\r\n        <span>\r\n          {(props.isPrivateChat ? \"@ \" : \"# \") + props.channelName}\r\n          {!props.isPrivateChat && (\r\n            <Icon\r\n              onClick={props.starChange}\r\n              name={props.starred ? \"star\" : \"star outline\"}\r\n              color={props.starred ? \"yellow\" : \"black\"}\r\n            />\r\n          )}\r\n        </span>\r\n        <Header.Subheader>\r\n          {props.uniqueUsers} User{props.uniqueUsers === 1 ? \"\" : \"s\"}\r\n        </Header.Subheader>\r\n      </Header>\r\n      <Header floated=\"right\">\r\n        <Input\r\n          name=\"search\"\r\n          icon=\"search\"\r\n          placeholder=\"Search Messages\"\r\n          size=\"mini\"\r\n          onChange={props.searchTermChange}\r\n        />\r\n      </Header>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default MessageHeader;\r\n","import React from \"react\";\r\nimport { Comment, Image } from \"semantic-ui-react\";\r\nimport TimeAgo from \"javascript-time-ago\";\r\nimport en from \"javascript-time-ago/locale/en\";\r\nimport \"./MessageContent.css\";\r\n\r\nTimeAgo.locale(en);\r\n\r\nconst timeAgo = new TimeAgo();\r\n\r\nconst MessageContent = (props) => {\r\n  return (\r\n    <Comment>\r\n      <Comment.Avatar src={props.message.user.avatar} />\r\n      <Comment.Content className={props.ownMessage ? \"ownMessage\" : null}>\r\n        <Comment.Author as=\"a\">{props.message.user.name}</Comment.Author>\r\n        <Comment.Metadata>\r\n          {timeAgo.format(props.message.timestamp)}\r\n        </Comment.Metadata>\r\n        {props.message.image ? (\r\n          <Image onLoad={props.imageLoaded} src={props.message.image} />\r\n        ) : (\r\n          <Comment.Text>{props.message.content}</Comment.Text>\r\n        )}\r\n      </Comment.Content>\r\n    </Comment>\r\n  );\r\n};\r\n\r\nexport default MessageContent;\r\n","import React, { useState } from \"react\";\r\nimport { Input, Modal, Button, Icon } from \"semantic-ui-react\";\r\nimport mime from \"mime-types\";\r\n\r\nexport const ImageUpload = (props) => {\r\n  const [fileState, setFileState] = useState(null);\r\n\r\n  const acceptedTypes = [\"image/png\", \"image/jpeg\"];\r\n\r\n  const onFileAdded = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setFileState(file);\r\n    }\r\n  };\r\n\r\n  const submit = () => {\r\n    if (fileState && acceptedTypes.includes(mime.lookup(fileState.name))) {\r\n      props.uploadImage(fileState, mime.lookup(fileState.name));\r\n      props.onClose();\r\n      setFileState(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal basic open={props.open} onClose={props.onClose}>\r\n      <Modal.Header>Select a image</Modal.Header>\r\n      <Modal.Content>\r\n        <Input\r\n          type=\"file\"\r\n          name=\"file\"\r\n          onChange={onFileAdded}\r\n          fluid\r\n          label=\"File Type (png , jpeg)\"\r\n        />\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color=\"green\" onClick={submit}>\r\n          <Icon name=\"checkmark\" />\r\n          Add\r\n        </Button>\r\n        <Button color=\"red\" onClick={props.onClose}>\r\n          <Icon name=\"remove\" />\r\n          Cancel\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Segment, Input, Button } from \"semantic-ui-react\";\r\nimport firebase from \"../../../server/firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { ImageUpload } from \"../ImageUpload/ImageUpload\";\r\nimport uuidv4 from \"uuid/v4\";\r\n\r\nconst MessageInput = (props) => {\r\n  const messageRef = firebase.database().ref(\"messages\");\r\n  const storageRef = firebase.storage().ref();\r\n  const [messageState, setMessageState] = useState(\"\");\r\n  const [fileDialogState, setFileDialog] = useState(false);\r\n\r\n  const createMessageInfo = (downloadUrl) => {\r\n    return {\r\n      user: {\r\n        avatar: props.user.photoURL,\r\n        name: props.user.displayName,\r\n        id: props.user.uid,\r\n      },\r\n      content: messageState,\r\n      image: downloadUrl || \"\",\r\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n    };\r\n  };\r\n\r\n  const sendMessage = (downloadUrl) => {\r\n    if (messageState || downloadUrl) {\r\n      messageRef\r\n        .child(props.channel.id)\r\n        .push()\r\n        .set(createMessageInfo(downloadUrl))\r\n        .then(() => setMessageState(\"\"))\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n  const onMessageChange = (e) => {\r\n    const target = e.target;\r\n    setMessageState(target.value);\r\n  };\r\n\r\n  const createActionButtons = () => {\r\n    return (\r\n      <>\r\n        <Button\r\n          icon=\"send\"\r\n          onClick={() => {\r\n            sendMessage();\r\n          }}\r\n        />\r\n        <Button icon=\"upload\" onClick={() => setFileDialog(true)} />\r\n      </>\r\n    );\r\n  };\r\n  const uploadImage = (file, contentType) => {\r\n    const filePath = `chat/images/${uuidv4()}.jpg`;\r\n\r\n    storageRef\r\n      .child(filePath)\r\n      .put(file, { contentType: contentType })\r\n      .then((data) => {\r\n        data.ref\r\n          .getDownloadURL()\r\n          .then((url) => {\r\n            sendMessage(url);\r\n          })\r\n          .catch((err) => console.log(err));\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  return (\r\n    <Segment>\r\n      <Input\r\n        onChange={onMessageChange}\r\n        fluid={true}\r\n        name=\"message\"\r\n        value={messageState}\r\n        label={createActionButtons()}\r\n        labelPosition=\"right\"\r\n      />\r\n      <ImageUpload\r\n        uploadImage={uploadImage}\r\n        open={fileDialogState}\r\n        onClose={() => setFileDialog(false)}\r\n      />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user.currentUser,\r\n    channel: state.channel.currentChannel,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MessageInput);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport MessageHeader from \"./MessageHeader/MessageHeader\";\r\nimport MessageContent from \"./MessageContent/MessageContent\";\r\nimport MessageInput from \"./MessageInput/MessageInput\";\r\nimport firebase from \"../../server/firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setfavouriteChannel,\r\n  removefavouriteChannel,\r\n} from \"../../store/actioncreator\";\r\nimport { Segment, Comment } from \"semantic-ui-react\";\r\nimport \"./Messages.css\";\r\nconst Messages = (props) => {\r\n  const messageRef = firebase.database().ref(\"messages\");\r\n  const usersRef = firebase.database().ref(\"users\");\r\n\r\n  const [messagesState, setMessagesState] = useState([]);\r\n\r\n  const [searchTermState, setSearchTermState] = useState(\"\");\r\n  let divRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (props.channel) {\r\n      setMessagesState([]);\r\n      messageRef.child(props.channel.id).on(\"child_added\", (snap) => {\r\n        setMessagesState((currentState) => {\r\n          let updatedState = [...currentState];\r\n          updatedState.push(snap.val());\r\n          return updatedState;\r\n        });\r\n      });\r\n\r\n      return () => messageRef.child(props.channel.id).off();\r\n    }\r\n  }, [props.channel]);\r\n\r\n  useEffect(() => {\r\n    if (props.user) {\r\n      usersRef\r\n        .child(props.user.uid)\r\n        .child(\"favourite\")\r\n        .on(\"child_added\", (snap) => {\r\n          props.setfavouriteChannel(snap.val());\r\n        });\r\n\r\n      usersRef\r\n        .child(props.user.uid)\r\n        .child(\"favourite\")\r\n        .on(\"child_removed\", (snap) => {\r\n          props.removefavouriteChannel(snap.val());\r\n        });\r\n\r\n      return () => usersRef.child(props.user.uid).child(\"favourite\").off();\r\n    }\r\n  }, [props.user]);\r\n\r\n  useEffect(() => {\r\n    divRef.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messagesState]);\r\n\r\n  const displayMessages = () => {\r\n    let messagesToDisplay = searchTermState\r\n      ? filterMessageBySearchTerm()\r\n      : messagesState;\r\n    if (messagesToDisplay.length > 0) {\r\n      return messagesToDisplay.map((message) => {\r\n        return (\r\n          <MessageContent\r\n            imageLoaded={imageLoaded}\r\n            ownMessage={message.user.id === props.user.uid}\r\n            key={message.timestamp}\r\n            message={message}\r\n          />\r\n        );\r\n      });\r\n    }\r\n  };\r\n  const imageLoaded = () => {\r\n    divRef.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n  const searchTermChange = (e) => {\r\n    const target = e.target;\r\n    setSearchTermState(target.value);\r\n  };\r\n  const filterMessageBySearchTerm = () => {\r\n    const regex = new RegExp(searchTermState, \"gi\");\r\n    const messages = messagesState.reduce((acc, message) => {\r\n      if (\r\n        (message.content && message.content.match(regex)) ||\r\n        message.user.name.match(regex)\r\n      ) {\r\n        acc.push(message);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    return messages;\r\n  };\r\n\r\n  const uniqueusersCount = () => {\r\n    const uniqueUsers = messagesState.reduce((acc, message) => {\r\n      if (!acc.includes(message.user.name)) {\r\n        acc.push(message.user.name);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    return uniqueUsers.length;\r\n  };\r\n  const starChange = () => {\r\n    let favouriteRef = usersRef\r\n      .child(props.user.uid)\r\n      .child(\"favourite\")\r\n      .child(props.channel.id);\r\n    if (isStarred()) {\r\n      favouriteRef.remove();\r\n    } else {\r\n      favouriteRef.set({\r\n        channelId: props.channel.id,\r\n        channelName: props.channel.name,\r\n      });\r\n    }\r\n  };\r\n\r\n  const isStarred = () => {\r\n    return Object.keys(props.favouriteChannels).includes(props.channel?.id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"messages\">\r\n      <MessageHeader\r\n        starChange={starChange}\r\n        starred={isStarred()}\r\n        isPrivateChat={props.channel?.isPrivateChat}\r\n        searchTermChange={searchTermChange}\r\n        channelName={props.channel?.name}\r\n        uniqueUsers={uniqueusersCount()}\r\n      />\r\n      <Segment className=\"messagecontent\">\r\n        <Comment.Group>\r\n          {displayMessages()}\r\n          <div ref={(currentEl) => (divRef = currentEl)}></div>\r\n        </Comment.Group>\r\n      </Segment>\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    channel: state.channel.currentChannel,\r\n    user: state.user.currentUser,\r\n    favouriteChannels: state.favouriteChannel.favouriteChannel,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\r\n    removefavouriteChannel: (channel) =>\r\n      dispatch(removefavouriteChannel(channel)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);\r\n","import React from \"react\";\nimport { SideBar } from \"./components/SideBar/SideBar\";\nimport Messages from \"./components/Messages/Messages\";\n\nimport \"./App.css\";\nimport { Grid } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <Grid columns=\"equal\">\n      <SideBar />\n      <Grid.Column className=\"messagepanel\">\n        <Messages />\n      </Grid.Column>\n\n      <Grid.Column width={3}>\n        <span></span>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport {Grid,Form,Segment,Header,Button,Message,} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport firebase from \"../../../server/firebase\";\nimport \"../Auth.css\";\n\nconst Login = () => {\n  let user = {\n    email: \"\",\n    password: \"\",\n  };\n\n  let errors = [];\n\n  const [userState, setuserState] = useState(user);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorState, seterrorState] = useState(errors);\n\n  const handleInput = (event) => {\n    let target = event.target;\n    setuserState((currentState) => {\n      let currentuser = { ...currentState };\n      currentuser[target.name] = target.value;\n      return currentuser;\n    });\n  };\n\n  const checkForm = () => {\n    if (isFormEmpty()) {\n      seterrorState((error) =>\n        error.concat({ message: \"Please fill in all fields\" })\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const isFormEmpty = () => {\n    return !userState.password.length || !userState.email.length;\n  };\n\n  const formaterrors = () => {\n    return errorState.map((error, index) => <p key={index}>{error.message}</p>);\n  };\n\n  const onSubmit = (event) => {\n    seterrorState(() => []);\n    if (checkForm()) {\n      setIsLoading(true);\n      firebase\n        .auth()\n        .signInWithEmailAndPassword(userState.email, userState.password)\n        .then((user) => {\n          setIsLoading(false);\n          console.log(user);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  return (\n    <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\">\n      <Grid.Column style={{ maxWidth: \"500px\" }}>\n        <Header icon as=\"h2\" >\n          Login to ChatApp\n        </Header>\n        <Form onSubmit={onSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"email\"\n              value={userState.email}\n              icon=\"mail\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"email\"\n              placeholder=\"User Email\"\n            />\n            <Form.Input\n              name=\"password\"\n              value={userState.password}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"User Password\"\n            />\n          </Segment>\n          <Button\n            disabled={isLoading}\n            color=\"purple\"\n            style={{ width: \"450px\", fontSize: \"18px\" }}\n            loading={isLoading}\n          >\n            Login\n          </Button>\n        </Form>\n        {errorState.length > 0 && (\n          <Message error>\n            <h3>Errors</h3>\n            {formaterrors()}\n          </Message>\n        )}\n        <Message>\n          Don't have an account? <Link to=\"/register\">Register</Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport {Grid,Form,Segment,Header,Button,Message,} from \"semantic-ui-react\";\nimport firebase from \"../../../server/firebase\";\nimport \"../Auth.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Register = () => {\n  let user = {\n    userName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmpassword: \"\",\n  };\n\n  let errors = [];\n\n  let userCollectionRef = firebase.database().ref(\"users\");\n\n  const [userState, setuserState] = useState(user);\n  const [errorState, seterrorState] = useState(errors);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const handleInput = (event) => {\n    let target = event.target;\n    setuserState((currentState) => {\n      let currentuser = { ...currentState };\n      currentuser[target.name] = target.value;\n      return currentuser;\n    });\n  };\n\n  const checkForm = () => {\n    if (isFormEmpty()) {\n      seterrorState((error) =>\n        error.concat({ message: \"Please fill in all fields\" })\n      );\n      return false;\n    } else if (!checkPassword()) {\n      return false;\n    }\n    return true;\n  };\n\n  const isFormEmpty = () => {\n    return (\n      !userState.userName.length ||\n      !userState.password.length ||\n      !userState.confirmpassword.length ||\n      !userState.email.length\n    );\n  };\n\n  const checkPassword = () => {\n    if (userState.password.length < 8) {\n      seterrorState((error) =>\n        error.concat({ message: \"Password length should be greater than 8\" })\n      );\n      return false;\n    } else if (userState.password !== userState.confirmpassword) {\n      seterrorState((error) =>\n        error.concat({\n          message: \"Password and Confirm Password does not match\",\n        })\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const onSubmit = (event) => {\n    seterrorState(() => []);\n    setIsSuccess(false);\n    if (checkForm()) {\n      setIsLoading(true);\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(userState.email, userState.password)\n        .then((createdUser) => {\n          setIsLoading(false);\n          updateuserDetails(createdUser);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  const updateuserDetails = (createdUser) => {\n    if (createdUser) {\n      setIsLoading(true);\n      createdUser.user\n        .updateProfile({\n          displayName: userState.userName,\n          photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`,\n        })\n        .then(() => {\n          setIsLoading(false);\n          saveUserInDB(createdUser);\n        })\n        .catch((serverError) => {\n          setIsLoading(false);\n          seterrorState((error) => error.concat(serverError));\n        });\n    }\n  };\n\n  const saveUserInDB = (createdUser) => {\n    setIsLoading(true);\n    userCollectionRef\n      .child(createdUser.user.uid)\n      .set({\n        displayName: createdUser.user.displayName,\n        photoURL: createdUser.user.photoURL,\n      })\n      .then(() => {\n        setIsLoading(false);\n        setIsSuccess(true);\n      })\n      .catch((serverError) => {\n        setIsLoading(false);\n        seterrorState((error) => error.concat(serverError));\n      });\n  };\n\n  const formaterrors = () => {\n    return errorState.map((error, index) => <p key={index}>{error.message}</p>);\n  };\n\n  return (\n    <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\">\n      <Grid.Column style={{ maxWidth: \"500px\" }}>\n        <Header icon as=\"h2\" >\n          Register for ChatApp\n        </Header>\n        <Form onSubmit={onSubmit}>\n          <Segment stacked>\n            <Form.Input\n              name=\"userName\"\n              value={userState.userName}\n              icon=\"user\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"text\"\n              placeholder=\"User Name\"\n            />\n            <Form.Input\n              name=\"email\"\n              value={userState.email}\n              icon=\"mail\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"email\"\n              placeholder=\"User Email\"\n            />\n            <Form.Input\n              name=\"password\"\n              value={userState.password}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"User Password\"\n            />\n            <Form.Input\n              name=\"confirmpassword\"\n              value={userState.confirmpassword}\n              icon=\"lock\"\n              iconPosition=\"left\"\n              onChange={handleInput}\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n            />\n          </Segment>\n          <Button\n            disabled={isLoading}\n            color=\"orange\"\n            style={{ width: \"450px\", fontSize: \"18px\" }}\n            loading={isLoading}\n          >\n            Register\n          </Button>\n        </Form>\n        {errorState.length > 0 && (\n          <Message error>\n            <h3>Errors</h3>\n            {formaterrors()}\n          </Message>\n        )}\n        {isSuccess && (\n          <Message success>\n            <h3>Successfully Registered</h3>\n          </Message>\n        )}\n        <Message>\n          Already a user? <Link to=\"/login\">Login</Link>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Register;\n","import { SET_USER, SET_CHANNEL, SET_FAVOURITECHANNEL, REMOVE_FAVOURITECHANNEL } from './actiontypes';\nimport { combineReducers } from \"redux\";\n\nlet defaultUserState = {\n    currentUser: null\n}\n\nconst userReducer = (state = defaultUserState, action) => {\n    if (action.type === SET_USER) {\n        let payload = action.payload;\n        state = { ...payload };\n        return state;\n    }\n    return state;\n}\n\nlet defaultChannelState = {\n    currentChannel: null,\n    loading : true\n}\n\n\nconst channelReducer = (state = defaultChannelState, action) => {\n    if (action.type === SET_CHANNEL) {\n        let payload = action.payload;\n        state = { ...payload };\n        state.loading= false;\n        return state;\n    }\n    return state;\n}\n\nlet defaultFavouriteChannelState = {\n    favouriteChannel: {}\n}\n\n\nconst favouriteChannelReducer = (state = defaultFavouriteChannelState, action) => {\n    if (action.type === SET_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        updatedState[payload.channelId] = payload.channelName;\n        return { favouriteChannel: updatedState };\n    } else if (action.type === REMOVE_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        delete updatedState[payload.channelId];\n        return { favouriteChannel: updatedState };\n    }\n    return state;\n}\n\nexport const combinedReducers = combineReducers({ user: userReducer , channel: channelReducer , favouriteChannel: favouriteChannelReducer})","import React from 'react';\r\n\r\nimport \"./AppLoader.css\"\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nexport const AppLoader = (props) => {\r\n    return (<Dimmer active={props.loading}>\r\n        <Loader size=\"huge\" content=\"Loading...\" />\r\n    </Dimmer>)\r\n}","import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { connect, Provider } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport App from \"./App\";\nimport Login from \"./components/Auth/Login/Login\";\nimport Register from \"./components/Auth/Register/Register\";\nimport firebase from \"./server/firebase\";\nimport { setUser } from \"./store/actioncreator\";\nimport { combinedReducers } from \"./store/reducer\";\nimport { AppLoader } from \"./components/AppLoader/AppLoader\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst store = createStore(combinedReducers);\n\nconst Index = (props) => {\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        props.setUser(user);\n        props.history.push(\"/\");\n      } else {\n        props.setUser(null);\n        props.history.push(\"/login\");\n      }\n    });\n  }, []);\n\n  console.log(\"Debug\", props.currentUser);\n\n  return (\n    <>\n      <AppLoader loading={props.loading && props.location.pathname === \"/\"} />\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/\" component={App} />\n      </Switch>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.user.currentUser,\n    loading: state.channel.loading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => {\n      dispatch(setUser(user));\n    },\n  };\n};\n\nconst IndexWithRouter = withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Index)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <IndexWithRouter />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}